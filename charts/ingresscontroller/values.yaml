---
# -- Define ingressControllers
# Multiple might be defined.
ingresscontrollers:
    # -- Name of the IngressController. OpenShift initial IngressController is called 'default'.
  - name: default

    # -- Enable the configuration
    # @default -- false
    enabled: false

    # -- Number of replicas for this IngressController
    # @default -- 2
    replicas: 3

    # -- domain is a DNS name serviced by the ingress controller and is used to configure multiple features:
    # * For the LoadBalancerService endpoint publishing strategy, domain is used to configure DNS records.
    # See endpointPublishingStrategy. * When using a generated default certificate, the certificate will be
    # valid for domain and its subdomains. See defaultCertificate. * The value is published to individual
    # Route statuses so that end-users know where to target external DNS records. domain must be unique
    # among all IngressControllers, and cannot be updated. If empty, defaults to ingress.config.openshift.io/cluster .spec.domain.
    # @default -- N/A
    # domain: 'mydomain.com'


    # -- routeAdmission defines a policy for handling new route claims (for example, to allow or deny claims across namespaces).
    # @default -- N/A
    routeAdmission: {}
      # -- namespaces should be handled. <br />
      # Value must be one of: <br />
      # <ul>
      # <li>Strict: Do not allow routes in different namespaces to claim the same host.</li>
      # <li>InterNamespaceAllowed: Allow routes to claim different paths of the same host name across namespaces.</li>
      # </ul>
      # If empty, the default is Strict. <br />
      # @default -- N/A
      # namespaceOwnership: Strict

      # -- wildcardPolicy describes how routes with wildcard policies should be handled for the ingress controller.<br />
      # Note: Updating WildcardPolicy from WildcardsAllowed to WildcardsDisallowed will cause admitted routes with a wildcard policy of Subdomain to stop working.<br />
      # These routes must be updated to a wildcard policy of None to be readmitted by the ingress controller.<br />
      # WildcardPolicy supports WildcardsAllowed and WildcardsDisallowed values.<br />
      # If empty, defaults to "WildcardsDisallowed".
      # @default -- N/A
      # wildcardPolicy: WildcardsDisallowed

    # -- endpointPublishingStrategy is used to publish the ingress controller endpoints to other networks,
    # enable load balancer integrations, etc. If unset, the default is based on infrastructure.config.openshift.io/cluster
    # .status.platform: AWS: LoadBalancerService (with External scope) Azure: LoadBalancerService (with External scope)
    # GCP: LoadBalancerService (with External scope) IBMCloud: LoadBalancerService (with External scope)
    # AlibabaCloud: LoadBalancerService (with External scope) Libvirt: HostNetwork Any other platform types (including None)
    # default to HostNetwork. endpointPublishingStrategy cannot be updated.
    # @default -- N/A
    endpointPublishingStrategy: {}

    # -- The name of the secret that stores the certificate information for the IngressController
    # @default -- N/A
    defaultCertificate: my-certificate

    # -- Additional annotations for the IngressController
    # For example to enable HTTP/2 add the following:
    # ingress.operator.openshift.io/default-enable-http2: true
    # @default -- N/A
    annotations: ''

    # -- namespaceSelector is used to filter the set of namespaces serviced by the ingress controller.
    # This is useful for implementing shards. If unset, the default is no filtering.
    # @default -- N/A
    namespaceSelector: {}

    # -- tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers.
    # If unset, the default is based on the apiservers.config.openshift.io/cluster resource.
    # Note that when using the Old, Intermediate, and Modern profile types, the effective profile
    # configuration is subject to change between releases.
    # @default -- N/A
    tlsSecurityProfile: {}

    # -- Bind IngressController to specific nodes
    # Here as example for Infrastructure nodes.
    # @default -- empty
    nodePlacement:

      # NodeSelector that shall be used.
      nodeSelector: {}

      # -- Tolerations, required if the nodes are tainted.
      tolerations: {}
